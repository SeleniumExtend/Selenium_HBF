package testscript;


import java.io.FileInputStream;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.BindException;
import java.net.ServerSocket;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Properties;
import java.util.Random;

import javax.mail.MessagingException;
import javax.mail.internet.AddressException;

import org.apache.log4j.Logger;

import org.testng.annotations.AfterSuite;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeSuite;
import org.testng.annotations.Test;

//

import org.openqa.selenium.server.RemoteControlConfiguration;
import org.openqa.selenium.server.SeleniumServer;


import com.thoughtworks.selenium.SeleneseTestCase;
import com.thoughtworks.selenium.Selenium;


import reports.ReportUtil;

import util.DbManager;
import util.TestConfig;
import util.TestUtil;
import util.monitoringMail;

import datatable.Xls_Reader;

public class DriverScript extends SeleneseTestCase{
	
	public static Properties CONFIG;
	public static Properties OR;
	public static Properties APPTEXT;
	public static Xls_Reader controller;
	public static Xls_Reader testData=null;
	public static Xls_Reader DBresults=null;
	public static Random randomGenerator = new Random(); // Port Number genaration 
	public static String currentTest;
	public static String keyword;
	public static SeleniumServer server;
	public static Selenium selenium=null;
	public static String object;
	public static String currentTSID;
	public static String stepDescription;
	public static String proceedOnFail;
	public static String testStatus;
	public static String data_column_name;
	public static int  testRepeat;
	public static int nSelPort;
	public static String sSelPort;
	public static Calendar cal = new GregorianCalendar();
	public static  int month = cal.get(Calendar.MONTH);
	public static int year = cal.get(Calendar.YEAR);
	public static  int sec =cal.get(Calendar.SECOND);
	public static  int min =cal.get(Calendar.MINUTE);
	public static  int date = cal.get(Calendar.DATE);
	public static  int day =cal.get(Calendar.HOUR_OF_DAY);
	public static String strDate;
	public static String result;
	public static String mailresult=" - Script successfully executed - no errors found";
	public static String mailscreenshotpath;

	public static String getCurrentTimeStamp()
    { 
          SimpleDateFormat CurrentDate = new SimpleDateFormat("MM-dd-yyyy"+"_"+"HH-mm-ss");
          Date now = new Date(); 
         String CDate = CurrentDate.format(now); 
          
          return CDate; 
    }

	
	
	//Logs
	
	public static final Logger SELENIUM_LOGS = Logger.getRootLogger();
	public static final Logger APPLICATION_LOGS = Logger.getLogger("devpinoyLogger");
		

	
	
   	@BeforeSuite
	public void startTesting() throws Exception{
		 nSelPort = randomGenerator.nextInt(40000);
		   
		        //Server not up, start it

		        try {
		        	
		        	
		        	
		        	
		        	strDate=getCurrentTimeStamp();
		        	System.out.println("date time stamp :"+strDate);
		        	ServerSocket serverSocket = new ServerSocket(nSelPort);
		          serverSocket.close();
		         System.out.println(nSelPort);
		         RemoteControlConfiguration rcc = new RemoteControlConfiguration();

		         rcc.setPort(nSelPort);

		         server = new SeleniumServer(false, rcc);

 

		        } catch (Exception e) {

		            System.err.println("Could not create Selenium Server because of: "+ e.getMessage());

		            e.printStackTrace();

		        }

		        try {

		            server.start();

		            System.out.println("Server started");

		        } catch (Exception e) {

		            System.err.println("Could not start Selenium Server because of: " + e.getMessage());

		            e.printStackTrace();

		        }

		// start server - OLD METHOD TO START SELENIUM SERVER WITH ONE PORT ONLY
		

	/*	server = new SeleniumServer(nSelPort.);
		
		server.boot();
		server.start();
	*
	*/
			
	  
		        ReportUtil.startTesting("C://CMAutomation//tomcat-6.0//webapps//ROOT//htmlpages//index"+strDate+".html",
		TestUtil.now("dd.MMMMM.yyyy hh.mm.ss aaa"), 
                "Monitor Prod",
                "3.1");
		
       //Loading Config File
		CONFIG = new Properties();
		FileInputStream fs = new FileInputStream(System.getProperty("user.dir")+"\\src\\config\\config.properties");
		CONFIG.load(fs);
		
		// LOAD OR properties File
		OR = new Properties();
		fs = new FileInputStream(System.getProperty("user.dir")+"\\src\\config\\OR.properties");
		OR.load(fs);
		
		// app text prop load properties file
		APPTEXT = new Properties();
		fs = new FileInputStream(System.getProperty("user.dir")+"\\src\\config\\app_text.properties");
		APPTEXT.load(fs);
		
		// intialize datatable
		controller= new Xls_Reader(System.getProperty("user.dir")+"\\src\\config\\Controller.xlsx");
		testData  =  new Xls_Reader(System.getProperty("user.dir")+"\\src\\config\\TestData.xlsx");
		DBresults = new Xls_Reader(System.getProperty("user.dir")+"\\src\\config\\db_data.xlsx");
		
		//Call Setup Method
		//

		setUp(CONFIG.getProperty("testSiteURL"),CONFIG.getProperty("testBrowser"),nSelPort);	
		selenium=super.selenium;
		APPLICATION_LOGS.debug("Server Started");
		 
		//Create db connection
		DbManager.setDbConnection();
		DbManager.setMysqlDbConnection();
		
		//Pass Query
		List<String> values =DbManager.getQuery("select top 1* from ev_call");
		APPLICATION_LOGS.debug("Selected from ev_call table, first column and first row value:"+values);
		
		List<String> values1 =DbManager.getMysqlQuery("select call_external_id from fact_evaluation limit 1");
		APPLICATION_LOGS.debug("Selected from ev_call table, first column and first row value:"+values1);
		
	}
	
	@Test
	
	public void testApp() {
		String startTime=null;
		ReportUtil.startSuite("Suite 1");
		for(int tcid=2 ; tcid<=controller.getRowCount("Suite1");tcid++){
			currentTest = controller.getCellData("Suite1", "TCID", tcid);
			
			// initilize start time of test
			if(controller.getCellData("Suite1", "Runmode", tcid).equals("Y")){
				// execute the keywords
				// loop again - rows in test data
				int totalSets=testData.getRowCount(currentTest+"1");; // holds total rows in test data sheet. IF sheet does not exist then 2 by default
				if(totalSets<=1){
					totalSets=2; // run atleast once
				}
					
				for( testRepeat=2; testRepeat<=totalSets;testRepeat++){	
					startTime=TestUtil.now("dd.MMMMM.yyyy hh.mm.ss aaa");

				APPLICATION_LOGS.debug("Executing the test "+ currentTest);
				// implement keyword . Reflection API
				try{
				for(int tsid=2;tsid<=controller.getRowCount(currentTest);tsid++){
					// values from xls
					keyword=controller.getCellData(currentTest, "Keyword", tsid);
					object=controller.getCellData(currentTest, "Object", tsid);
					currentTSID=controller.getCellData(currentTest, "TSID", tsid);
					stepDescription=controller.getCellData(currentTest, "Decription", tsid);
					proceedOnFail=controller.getCellData(currentTest, "ProceedOnFail", tsid);
					data_column_name=controller.getCellData(currentTest, "Data_Column_Name", tsid);
				
					Method method= Keywords.class.getMethod(keyword);
					result = (String)method.invoke(method);
					APPLICATION_LOGS.debug("***Result of execution -- "+result);
					
					// take screenshot - every keyword
					String fileName="Suite1_TC"+(tcid-1)+"_TS"+tsid+"_"+keyword+testRepeat+".jpg";
				
					
					if(result.startsWith("Pass")){
						testStatus=result;
						
						//Uncomment this one to capture screenshots in case of Pass
						//TestUtil.captureScreenshot(CONFIG.getProperty("screenshotPath")+TestUtil.imageName+".jpeg");
						
					ReportUtil.addKeyword(stepDescription, keyword, result, "http://"+TestUtil.Handeler()+":8282//screenshots//"+TestUtil.imageNameIP+".jpeg");
					
					}
					
					else if(result.startsWith("Fail")){
							testStatus=result;
							// take screenshot - only on error
						TestUtil.captureScreenshot(CONFIG.getProperty("screenshotPath")+TestUtil.imageName+".jpeg");
					    	
							//changed to make the screenshot path generic
						ReportUtil.addKeyword(stepDescription, keyword, result, "http://"+TestUtil.Handeler()+":8282//screenshots//"+TestUtil.imageNameIP+".jpeg");
					//	mailscreenshotpath = "C:/CMAutomation/tomcat-6.0/webapps/ROOT/screenshots/"+currentTest+currentTSID+TestUtil.year+"_"+TestUtil.date+"_"+(TestUtil.month+1)+"_"+TestUtil.day+"_"+TestUtil.min+"_" +TestUtil.sec+".jpeg";
						mailscreenshotpath = TestUtil.imageName+".jpeg";
						System.out.println("your screenshot path :: "+ mailscreenshotpath);
						
						//System.out.println("Your attachemnt path"+ TestConfig.attachmentPath);
							mailresult=" - Script failed ";
							
							if(proceedOnFail.equalsIgnoreCase("N")){
								
								break;
								
								
							}
						break;
						
						}
					
					}
					
					
				}
				catch(Throwable t){
					APPLICATION_LOGS.debug("Error came");
					
				}
				// report pass or fail
				
				if(testStatus == null){
					testStatus="Pass";
				}
				APPLICATION_LOGS.debug("***********************************"+currentTest+" --- " +testStatus);
				ReportUtil.addTestCase(currentTest, 
										startTime, 
										TestUtil.now("dd.MMMMM.yyyy hh.mm.ss aaa"),
										testStatus );
				
				if(result.startsWith("Fail")){
				
					break; 
	                  }
				
				}// test data

				
				
				
			}else{
				APPLICATION_LOGS.debug("Skipping the test "+ currentTest);
				testStatus="Skip";
				
				// report skipped
				APPLICATION_LOGS.debug("***********************************"+currentTest+" --- " +testStatus);
				ReportUtil.addTestCase(currentTest, 
										TestUtil.now("dd.MMMMM.yyyy hh.mm.ss aaa"), 
										TestUtil.now("dd.MMMMM.yyyy hh.mm.ss aaa"),
										testStatus );
				
			}
			
			testStatus=null;
			
			if(result.startsWith("Fail")){
                break; 
                }

		}
		ReportUtil.endSuite();
	}
	
	

	
	@AfterSuite
	public static void endScript() throws Exception{
		
		
		ReportUtil.updateEndTime(TestUtil.now("dd.MMMMM.yyyy hh.mm.ss aaa"));
		
	
		
		// Sending Mail when script fails
		if(result.startsWith("Fail")){
			
		
		selenium.stop();
		
			monitoringMail.sendMail(TestConfig.server, TestConfig.from, TestConfig.to, TestConfig.subject+mailresult+" "+"on step "+stepDescription+'-'+" "+result+" "+" "+"Timed out after "+Keywords.globalwait+" seconds", TestConfig.messageBody, mailscreenshotpath, TestConfig.attachmentName);
			
		}
		
		// Sending Mail After Execution of All TestCases ON HOLD AND RECOMENDED ONLY FOR COMPLETE BVT
		
		//monitoringMail.sendMail(TestConfig.server, TestConfig.from, TestConfig.to, TestConfig.subject+mailresult, TestConfig.messageBody, TestConfig.attachmentPath, TestConfig.attachmentName);
		//	monitoringMail.sendMail(TestConfig.server, TestConfig.from, TestConfig.to, TestConfig.subject, TestConfig.messageBody, TestConfig.attachmentPath, TestConfig.attachmentName);
		
		selenium.stop();	
		

	}
	

}
